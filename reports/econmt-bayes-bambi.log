Traceback (most recent call last):
  File "/Users/arthurturrell/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/arthurturrell/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/arthurturrell/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/arthurturrell/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/arthurturrell/opt/anaconda3/envs/codeforecon/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/Users/arthurturrell/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/arthurturrell/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/arthurturrell/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Initialise the model; use "-1" at the end to suppress the constant term
model = bmb.Model('Y ~ X', df_bambi)

# Fit the model using 1000 on each of 4 chains
results = model.fit(draws=1000, chains=4)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Input [0;32mIn [4][0m, in [0;36m<cell line: 5>[0;34m()[0m
[1;32m      2[0m model [38;5;241m=[39m bmb[38;5;241m.[39mModel([38;5;124m'[39m[38;5;124mY ~ X[39m[38;5;124m'[39m, df_bambi)
[1;32m      4[0m [38;5;66;03m# Fit the model using 1000 on each of 4 chains[39;00m
[0;32m----> 5[0m results [38;5;241m=[39m [43mmodel[49m[38;5;241;43m.[39;49m[43mfit[49m[43m([49m[43mdraws[49m[38;5;241;43m=[39;49m[38;5;241;43m1000[39;49m[43m,[49m[43m [49m[43mchains[49m[38;5;241;43m=[39;49m[38;5;241;43m4[39;49m[43m)[49m

File [0;32m~/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/bambi/models.py:277[0m, in [0;36mModel.fit[0;34m(self, draws, tune, discard_tuned_samples, omit_offsets, include_mean, inference_method, init, n_init, chains, cores, random_seed, **kwargs)[0m
[1;32m    270[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m([38;5;28mself[39m[38;5;241m.[39mfamily, univariate[38;5;241m.[39mBernoulli):
[1;32m    271[0m     _log[38;5;241m.[39minfo(
[1;32m    272[0m         [38;5;124m"[39m[38;5;124mModeling the probability that [39m[38;5;132;01m%s[39;00m[38;5;124m==[39m[38;5;132;01m%s[39;00m[38;5;124m"[39m,
[1;32m    273[0m         [38;5;28mself[39m[38;5;241m.[39mresponse[38;5;241m.[39mname,
[1;32m    274[0m         [38;5;28mstr[39m([38;5;28mself[39m[38;5;241m.[39mresponse[38;5;241m.[39msuccess),
[1;32m    275[0m     )
[0;32m--> 277[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mbackend[49m[38;5;241;43m.[39;49m[43mrun[49m[43m([49m
[1;32m    278[0m [43m    [49m[43mdraws[49m[38;5;241;43m=[39;49m[43mdraws[49m[43m,[49m
[1;32m    279[0m [43m    [49m[43mtune[49m[38;5;241;43m=[39;49m[43mtune[49m[43m,[49m
[1;32m    280[0m [43m    [49m[43mdiscard_tuned_samples[49m[38;5;241;43m=[39;49m[43mdiscard_tuned_samples[49m[43m,[49m
[1;32m    281[0m [43m    [49m[43momit_offsets[49m[38;5;241;43m=[39;49m[43momit_offsets[49m[43m,[49m
[1;32m    282[0m [43m    [49m[43minclude_mean[49m[38;5;241;43m=[39;49m[43minclude_mean[49m[43m,[49m
[1;32m    283[0m [43m    [49m[43minference_method[49m[38;5;241;43m=[39;49m[43minference_method[49m[43m,[49m
[1;32m    284[0m [43m    [49m[43minit[49m[38;5;241;43m=[39;49m[43minit[49m[43m,[49m
[1;32m    285[0m [43m    [49m[43mn_init[49m[38;5;241;43m=[39;49m[43mn_init[49m[43m,[49m
[1;32m    286[0m [43m    [49m[43mchains[49m[38;5;241;43m=[39;49m[43mchains[49m[43m,[49m
[1;32m    287[0m [43m    [49m[43mcores[49m[38;5;241;43m=[39;49m[43mcores[49m[43m,[49m
[1;32m    288[0m [43m    [49m[43mrandom_seed[49m[38;5;241;43m=[39;49m[43mrandom_seed[49m[43m,[49m
[1;32m    289[0m [43m    [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m,[49m
[1;32m    290[0m [43m[49m[43m)[49m

File [0;32m~/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/bambi/backend/pymc.py:94[0m, in [0;36mPyMCModel.run[0;34m(self, draws, tune, discard_tuned_samples, omit_offsets, include_mean, inference_method, init, n_init, chains, cores, random_seed, **kwargs)[0m
[1;32m     92[0m [38;5;66;03m# NOTE: Methods return different types of objects (idata, approximation, and dictionary)[39;00m
[1;32m     93[0m [38;5;28;01mif[39;00m inference_method [38;5;129;01min[39;00m [[38;5;124m"[39m[38;5;124mmcmc[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mnuts_numpyro[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mnuts_blackjax[39m[38;5;124m"[39m]:
[0;32m---> 94[0m     result [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_run_mcmc[49m[43m([49m
[1;32m     95[0m [43m        [49m[43mdraws[49m[43m,[49m
[1;32m     96[0m [43m        [49m[43mtune[49m[43m,[49m
[1;32m     97[0m [43m        [49m[43mdiscard_tuned_samples[49m[43m,[49m
[1;32m     98[0m [43m        [49m[43momit_offsets[49m[43m,[49m
[1;32m     99[0m [43m        [49m[43minclude_mean[49m[43m,[49m
[1;32m    100[0m [43m        [49m[43minit[49m[43m,[49m
[1;32m    101[0m [43m        [49m[43mn_init[49m[43m,[49m
[1;32m    102[0m [43m        [49m[43mchains[49m[43m,[49m
[1;32m    103[0m [43m        [49m[43mcores[49m[43m,[49m
[1;32m    104[0m [43m        [49m[43mrandom_seed[49m[43m,[49m
[1;32m    105[0m [43m        [49m[43minference_method[49m[43m,[49m
[1;32m    106[0m [43m        [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m,[49m
[1;32m    107[0m [43m    [49m[43m)[49m
[1;32m    108[0m [38;5;28;01melif[39;00m inference_method [38;5;241m==[39m [38;5;124m"[39m[38;5;124mvi[39m[38;5;124m"[39m:
[1;32m    109[0m     result [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_run_vi([38;5;241m*[39m[38;5;241m*[39mkwargs)

File [0;32m~/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/bambi/backend/pymc.py:283[0m, in [0;36mPyMCModel._run_mcmc[0;34m(self, draws, tune, discard_tuned_samples, omit_offsets, include_mean, init, n_init, chains, cores, random_seed, sampler_backend, **kwargs)[0m
[1;32m    281[0m [38;5;28;01mif[39;00m sampler_backend [38;5;241m==[39m [38;5;124m"[39m[38;5;124mmcmc[39m[38;5;124m"[39m:
[1;32m    282[0m     [38;5;28;01mtry[39;00m:
[0;32m--> 283[0m         idata [38;5;241m=[39m [43mpm[49m[38;5;241;43m.[39;49m[43msample[49m[43m([49m
[1;32m    284[0m [43m            [49m[43mdraws[49m[38;5;241;43m=[39;49m[43mdraws[49m[43m,[49m
[1;32m    285[0m [43m            [49m[43mtune[49m[38;5;241;43m=[39;49m[43mtune[49m[43m,[49m
[1;32m    286[0m [43m            [49m[43mdiscard_tuned_samples[49m[38;5;241;43m=[39;49m[43mdiscard_tuned_samples[49m[43m,[49m
[1;32m    287[0m [43m            [49m[43minit[49m[38;5;241;43m=[39;49m[43minit[49m[43m,[49m
[1;32m    288[0m [43m            [49m[43mn_init[49m[38;5;241;43m=[39;49m[43mn_init[49m[43m,[49m
[1;32m    289[0m [43m            [49m[43mchains[49m[38;5;241;43m=[39;49m[43mchains[49m[43m,[49m
[1;32m    290[0m [43m            [49m[43mcores[49m[38;5;241;43m=[39;49m[43mcores[49m[43m,[49m
[1;32m    291[0m [43m            [49m[43mrandom_seed[49m[38;5;241;43m=[39;49m[43mrandom_seed[49m[43m,[49m
[1;32m    292[0m [43m            [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m,[49m
[1;32m    293[0m [43m        [49m[43m)[49m
[1;32m    294[0m     [38;5;28;01mexcept[39;00m ([38;5;167;01mRuntimeError[39;00m, [38;5;167;01mValueError[39;00m):
[1;32m    295[0m         [38;5;28;01mif[39;00m (
[1;32m    296[0m             [38;5;124m"[39m[38;5;124mValueError: Mass matrix contains[39m[38;5;124m"[39m [38;5;129;01min[39;00m traceback[38;5;241m.[39mformat_exc()
[1;32m    297[0m             [38;5;129;01mand[39;00m init [38;5;241m==[39m [38;5;124m"[39m[38;5;124mauto[39m[38;5;124m"[39m
[1;32m    298[0m         ):

File [0;32m~/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/pymc/sampling.py:609[0m, in [0;36msample[0;34m(draws, step, init, n_init, initvals, trace, chains, cores, tune, progressbar, model, random_seed, discard_tuned_samples, compute_convergence_checks, callback, jitter_max_retries, return_inferencedata, idata_kwargs, mp_ctx, **kwargs)[0m
[1;32m    607[0m _print_step_hierarchy(step)
[1;32m    608[0m [38;5;28;01mtry[39;00m:
[0;32m--> 609[0m     mtrace [38;5;241m=[39m [43m_mp_sample[49m[43m([49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43msample_args[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mparallel_args[49m[43m)[49m
[1;32m    610[0m [38;5;28;01mexcept[39;00m pickle[38;5;241m.[39mPickleError:
[1;32m    611[0m     _log[38;5;241m.[39mwarning([38;5;124m"[39m[38;5;124mCould not pickle model, sampling singlethreaded.[39m[38;5;124m"[39m)

File [0;32m~/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/pymc/sampling.py:1507[0m, in [0;36m_mp_sample[0;34m(draws, tune, step, chains, cores, random_seed, start, progressbar, trace, model, callback, discard_tuned_samples, mp_ctx, **kwargs)[0m
[1;32m   1494[0m draws [38;5;241m-[39m[38;5;241m=[39m tune
[1;32m   1496[0m traces [38;5;241m=[39m [
[1;32m   1497[0m     _init_trace(
[1;32m   1498[0m         expected_length[38;5;241m=[39mdraws [38;5;241m+[39m tune,
[0;32m   (...)[0m
[1;32m   1504[0m     [38;5;28;01mfor[39;00m chain_number [38;5;129;01min[39;00m [38;5;28mrange[39m(chains)
[1;32m   1505[0m ]
[0;32m-> 1507[0m sampler [38;5;241m=[39m [43mps[49m[38;5;241;43m.[39;49m[43mParallelSampler[49m[43m([49m
[1;32m   1508[0m [43m    [49m[43mdraws[49m[38;5;241;43m=[39;49m[43mdraws[49m[43m,[49m
[1;32m   1509[0m [43m    [49m[43mtune[49m[38;5;241;43m=[39;49m[43mtune[49m[43m,[49m
[1;32m   1510[0m [43m    [49m[43mchains[49m[38;5;241;43m=[39;49m[43mchains[49m[43m,[49m
[1;32m   1511[0m [43m    [49m[43mcores[49m[38;5;241;43m=[39;49m[43mcores[49m[43m,[49m
[1;32m   1512[0m [43m    [49m[43mseeds[49m[38;5;241;43m=[39;49m[43mrandom_seed[49m[43m,[49m
[1;32m   1513[0m [43m    [49m[43mstart_points[49m[38;5;241;43m=[39;49m[43mstart[49m[43m,[49m
[1;32m   1514[0m [43m    [49m[43mstep_method[49m[38;5;241;43m=[39;49m[43mstep[49m[43m,[49m
[1;32m   1515[0m [43m    [49m[43mprogressbar[49m[38;5;241;43m=[39;49m[43mprogressbar[49m[43m,[49m
[1;32m   1516[0m [43m    [49m[43mmp_ctx[49m[38;5;241;43m=[39;49m[43mmp_ctx[49m[43m,[49m
[1;32m   1517[0m [43m[49m[43m)[49m
[1;32m   1518[0m [38;5;28;01mtry[39;00m:
[1;32m   1519[0m     [38;5;28;01mtry[39;00m:

File [0;32m~/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/pymc/parallel_sampling.py:415[0m, in [0;36mParallelSampler.__init__[0;34m(self, draws, tune, chains, cores, seeds, start_points, step_method, progressbar, mp_ctx)[0m
[1;32m    413[0m step_method_pickled [38;5;241m=[39m [38;5;28;01mNone[39;00m
[1;32m    414[0m [38;5;28;01mif[39;00m mp_ctx[38;5;241m.[39mget_start_method() [38;5;241m!=[39m [38;5;124m"[39m[38;5;124mfork[39m[38;5;124m"[39m:
[0;32m--> 415[0m     step_method_pickled [38;5;241m=[39m [43mcloudpickle[49m[38;5;241;43m.[39;49m[43mdumps[49m[43m([49m[43mstep_method[49m[43m,[49m[43m [49m[43mprotocol[49m[38;5;241;43m=[39;49m[38;5;241;43m-[39;49m[38;5;241;43m1[39;49m[43m)[49m
[1;32m    417[0m [38;5;28mself[39m[38;5;241m.[39m_samplers [38;5;241m=[39m [
[1;32m    418[0m     ProcessAdapter(
[1;32m    419[0m         draws,
[0;32m   (...)[0m
[1;32m    428[0m     [38;5;28;01mfor[39;00m chain, seed, start [38;5;129;01min[39;00m [38;5;28mzip[39m([38;5;28mrange[39m(chains), seeds, start_points)
[1;32m    429[0m ]
[1;32m    431[0m [38;5;28mself[39m[38;5;241m.[39m_inactive [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_samplers[38;5;241m.[39mcopy()

File [0;32m~/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/cloudpickle/cloudpickle_fast.py:73[0m, in [0;36mdumps[0;34m(obj, protocol, buffer_callback)[0m
[1;32m     69[0m [38;5;28;01mwith[39;00m io[38;5;241m.[39mBytesIO() [38;5;28;01mas[39;00m file:
[1;32m     70[0m     cp [38;5;241m=[39m CloudPickler(
[1;32m     71[0m         file, protocol[38;5;241m=[39mprotocol, buffer_callback[38;5;241m=[39mbuffer_callback
[1;32m     72[0m     )
[0;32m---> 73[0m     [43mcp[49m[38;5;241;43m.[39;49m[43mdump[49m[43m([49m[43mobj[49m[43m)[49m
[1;32m     74[0m     [38;5;28;01mreturn[39;00m file[38;5;241m.[39mgetvalue()

File [0;32m~/opt/anaconda3/envs/codeforecon/lib/python3.8/site-packages/cloudpickle/cloudpickle_fast.py:632[0m, in [0;36mCloudPickler.dump[0;34m(self, obj)[0m
[1;32m    630[0m [38;5;28;01mdef[39;00m [38;5;21mdump[39m([38;5;28mself[39m, obj):
[1;32m    631[0m     [38;5;28;01mtry[39;00m:
[0;32m--> 632[0m         [38;5;28;01mreturn[39;00m [43mPickler[49m[38;5;241;43m.[39;49m[43mdump[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mobj[49m[43m)[49m
[1;32m    633[0m     [38;5;28;01mexcept[39;00m [38;5;167;01mRuntimeError[39;00m [38;5;28;01mas[39;00m e:
[1;32m    634[0m         [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mrecursion[39m[38;5;124m"[39m [38;5;129;01min[39;00m e[38;5;241m.[39margs[[38;5;241m0[39m]:

[0;31mTypeError[0m: cannot pickle 'fortran' object
TypeError: cannot pickle 'fortran' object

